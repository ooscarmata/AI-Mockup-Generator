import { GoogleGenAI, Modality } from "@google/genai";
import { UploadedFile, GeneratedImage } from '../types';

// IMPORTANT: Use Vite's syntax for environment variables
const apiKey = import.meta.env.VITE_GEMINI_API_KEY;

if (!apiKey) {
  throw new Error("VITE_GEMINI_API_KEY is not set. Please add it to your environment.");
}

const ai = new GoogleGenAI({ apiKey: apiKey });

const getPrompt = (mockupType: string, isVariation: boolean): string => {
    if (isVariation) {
        return `Generate a new variation of a photorealistic mockup of the provided design on ${mockupType}. Use a slightly different angle, lighting, or context to create a fresh look. Keep it high-resolution and professional. The design must be integrated naturally onto the object.`;
    }
    return `Generate a high-resolution, photorealistic mockup of the provided design on ${mockupType}. The mockup should look professional, with realistic lighting, shadows, textures, and perspective. The design must be integrated naturally onto the object.`;
};

export const generateMockup = async (
  file: UploadedFile,
  mockupType: string,
  isVariation: boolean
): Promise<GeneratedImage> => {
  const model = 'gemini-2.5-flash-image-preview';

  const prompt = getPrompt(mockupType, isVariation);

  const response = await ai.models.generateContent({
    model: model,
    contents: {
      parts: [
        {
          inlineData: {
            data: file.base64,
            mimeType: file.mimeType,
          },
        },
        { text: prompt },
      ],
    },
    config: {
      responseModalities: [Modality.IMAGE, Modality.TEXT],
    },
  });

  const parts = response.candidates?.[0]?.content?.parts;
  if (parts) {
    for (const part of parts) {
      if (part.inlineData) {
        return {
            base64: part.inlineData.data,
            mimeType: part.inlineData.mimeType,
        };
      }
    }
  }

  throw new Error('No image was generated by the API.');
};
